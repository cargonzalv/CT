#!/usr/bin/env bash

# Init block
set -o pipefail \
    -o errexit

if [[ -n ${DEBUG} ]]; then
  set -o xtrace \
      -o verbose
fi

# Define functions
print_usage() {
  echo 'new_version <dir> <bump>'
  exit 1
}

substitute_version() {
  local _folder=${1}
  local _new_version=${2}
  local _regex="([0-9]+\.[0-9]+\.[0-9]+(-rc[0-9]+)?)"
  find "${1}/${_new_version}" \
    -type f \
    -exec sed -i -E "s/${_folder}\/${_regex}/${_folder}\/${_new_version}/g" {} \;
}

update_versions() {
  if [[ -z ${NO_UPDATE} ]]; then ./update-versions; fi
}

bump() {
  local _folder=${1}
  local _latest_version=${2}
  local _bump=${3}
  local _major_version
  local _minor_version
  local _patch_version
  local _new_version

  case "${_bump}" in
    major )
      _major_version="$(($(cut -d. -f1 <<< "${_latest_version}")+1))"
      _minor_version="0"
      _patch_version="0";;
    minor )
      _major_version="$(cut -d. -f1 <<< "${_latest_version}")"
      _minor_version="$(($(cut -d. -f2 <<< "${_latest_version}")+1))"
      _patch_version="0";;
    patch )
      _major_version="$(cut -d. -f1 <<< "${_latest_version}")"
      _minor_version="$(cut -d. -f2 <<< "${_latest_version}")"
      _patch_version="$(($(cut -d. -f3 <<< "${_latest_version}")+1))";;
    rc    )
      _major_version="$(cut -d. -f1 <<< "${_latest_version}")"
      _minor_version="$(cut -d. -f2 <<< "${_latest_version}")"
      _patch_version="$(bump_rc "$(cut -d. -f3 <<< "${_latest_version}")")";;
    *     )
      echo "This type of version bump is not supported"; exit 1;;
  esac
  _new_version="${_major_version}.${_minor_version}.${_patch_version}"
  cp -r "${_folder}/${_latest_version}/." "${_folder}/${_new_version}"
  echo "${_new_version}"
}

bump_rc() {
  local _input_version=${1}
  local _is_rc
  local _current_rc
  local _new_rc
  local _minor_only

  _is_rc="$(grep -oE '\-rc[0-9]+$' <<< "${_latest_version}" || echo "")"
  _minor_only="$(grep -oE '^[0-9]+' <<< "${_input_version}")"
  
  if [[ -n ${_is_rc} ]]; then
    _current_rc="$(grep -oE '[0-9]+' <<< "${_is_rc}")"
    _new_rc=$((_current_rc+1))
  else
    _new_rc="1"
  fi

  echo "${_minor_only}-rc${_new_rc}"
}

# Main logic
FOLDER="${1}"
BUMP="${2}"

if [[ $# -lt 2 ]]; then
  print_usage
fi

if grep -qvE '^(minor|major|patch|rc)$' <<< "${BUMP}"; then
  echo 'Bump must be minor, major, patch, or rc'
  print_usage
fi

if [[ ! -d "${FOLDER}" ]]; then
  while true; do
    read -rp "The folder ${FOLDER} does not exist. Would you like to create it? (y/N)" yn
    case $yn in
        [Yy]* ) mkdir -p "${FOLDER}/0.1.0"; update_versions; exit 0; break;;
        [Nn]* ) exit 1;;
        * ) exit 1;;
    esac
  done
fi

LATEST_VERSION=$(find "${FOLDER}" \
  -mindepth 1 \
  -maxdepth 1 \
  -type d \
  -exec basename {} \; \
    | sort -rV \
    | head -1 \
)

NEW_VERSION="$(bump "${FOLDER}" "${LATEST_VERSION}" "${BUMP}")"

update_versions
substitute_version "${FOLDER}" "${NEW_VERSION}"
